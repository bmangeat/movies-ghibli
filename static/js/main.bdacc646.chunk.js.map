{"version":3,"sources":["states/MovieContext.js","states/FilteredMovieContext.js","components/Movie.js","components/SearchBar.js","components/MoviesList.js","components/Nav.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["MovieContext","createContext","MovieProvider","props","useState","movies","setMovies","useEffect","fetchData","moviesFromApi","fetch","then","response","json","data","forEach","el","push","id","title","description","catch","err","console","error","message","Provider","value","children","FilteredMovieContext","FilteredMovieProvider","filteredMovies","setFilteredMovies","Movie","movie","SearchBar","useContext","className","onChange","e","preventDefault","filter","obj","toLowerCase","includes","filterByName","target","type","MoviesList","Array","isArray","length","map","key","Nav","to","style","color","textDecoration","Home","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bdacc646.chunk.js","sourcesContent":["import React, { useEffect, useState, createContext } from \"react\"\n\nexport const MovieContext = createContext()\n\nexport const MovieProvider = ( props ) => {\n\n    const [ movies, setMovies ] = useState( [] )\n    useEffect(\n        () => {\n            fetchData()\n        },\n        []\n    )\n\n\n\n    const fetchData = () => {\n        let moviesFromApi = []\n        fetch( 'https://ghibliapi.herokuapp.com/films' )\n            .then( response => response.json() )\n            .then( data => {\n                data.forEach(el => {\n                    moviesFromApi.push(\n                        {\n                            id: el.id,\n                            title: el.title,\n                            description: el.description\n                        }\n                    )\n                })\n                setMovies(moviesFromApi)\n\n                    /*data.map( movie => (\n                            console.log( movie.id ),\n                                setMovies( [\n                                    ...movies,\n                                    {\n                                        id: movie.id,\n                                        title: movie.title,\n                                        description: movie.description\n                                    }\n                                ] )\n                        )\n                    )*/\n                }\n            )\n            .catch((err) => {console.error(err.message)})\n\n    }\n\n    return (\n        <MovieContext.Provider value={[ movies, setMovies ]}>\n            {props.children}\n        </MovieContext.Provider>\n\n\n    )\n}\n\n","import React, { useState, createContext } from \"react\"\n\nexport const FilteredMovieContext = createContext()\n\nexport const FilteredMovieProvider = ( props ) => {\n    const [ filteredMovies, setFilteredMovies ] = useState( [] )\n    return (\n        <FilteredMovieContext.Provider value={[ filteredMovies, setFilteredMovies ]}>\n            {props.children}\n        </FilteredMovieContext.Provider>\n    )\n}\n","import React from \"react\"\n\nconst Movie = ({movie}) => {\n    return(\n        <div>\n            <h2>{movie.title}</h2>\n            <p>{movie.description}</p>\n\n        </div>\n    )\n}\n\nexport default Movie\n","import React, { useContext } from \"react\"\nimport { MovieContext } from \"../states/MovieContext\"\nimport { FilteredMovieContext } from \"../states/FilteredMovieContext\"\n\nconst SearchBar = () => {\n    // eslint-disable-next-line no-unused-vars\n    const [ filteredMovies, setFilteredMovies ] = useContext( FilteredMovieContext )\n    // eslint-disable-next-line no-unused-vars\n    const [ movies, setMovies ] = useContext( MovieContext )\n\n    const filterByName = ( obj, e ) => {\n        return obj.title.toLowerCase().includes( e.toLowerCase() );\n    }\n\n    const filterMovies = ( e ) => {\n        e.preventDefault()\n        setFilteredMovies( movies.filter( ( movie ) => filterByName( movie, e.target.value ) ) )\n    }\n\n    return (\n        <div className=\"searchbar-movieslist\">\n            <input onChange={filterMovies} type=\"text\"/>\n        </div>\n    )\n}\n\nexport default SearchBar\n","import React, { useContext } from \"react\"\n\n// Import Components\nimport { MovieContext } from \"../states/MovieContext\"\nimport Movie from \"./Movie\"\nimport SearchBar from \"./SearchBar\"\nimport { FilteredMovieContext } from \"../states/FilteredMovieContext\"\n\nconst MoviesList = () => {\n    // eslint-disable-next-line no-unused-vars\n    const [ movies, setMovies ] = useContext( MovieContext )\n    // eslint-disable-next-line no-unused-vars\n    const [ filteredMovies, setFilteredMovies ] = useContext( FilteredMovieContext )\n\n    return (\n        <div>\n            <h1>Ghibli Movies</h1>\n            <SearchBar/>\n            {\n                Array.isArray( filteredMovies ) && filteredMovies.length ?\n                    filteredMovies.map( ( movie ) => (\n                        <Movie key={movie.id} movie={movie}/>\n                    ) ) :\n                    movies.map( ( movie ) => (\n                        <Movie key={movie.id} movie={movie}/>\n                    ) )\n\n            }\n        </div>\n    )\n}\n\nexport default MoviesList\n","import React, { useContext } from \"react\"\nimport '../styles/Nav.scss'\nimport { Link } from \"react-router-dom\"\n\n// Import Components\nimport { MovieContext } from \"../states/MovieContext\"\n\nconst Nav = () => {\n    // eslint-disable-next-line no-unused-vars\n    const [ movies, setMovies ] = useContext( MovieContext )\n    return (\n        <nav>\n            <h2>Logo</h2>\n            <ul className=\"nav-links\">\n                <Link to=\"/\" style={{color: \"inherit\", textDecoration: \"inherit\"}}>\n                    <li>Home</li>\n                </Link>\n                <Link to=\"/movies\" style={{color: \"inherit\", textDecoration: \"inherit\"}}>\n                    <li>Movies List : {movies.length}</li>\n                </Link>\n            </ul>\n        </nav>\n\n    )\n}\n\n\nexport default Nav\n","import React from \"react\"\n\nconst Home = () => {\n    return (\n        <div>\n            <h1>Home Page</h1>\n        </div>\n    )\n}\n\nexport default Home\n","import React from 'react'\nimport './styles/App.scss'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\n\n// Import states\nimport { MovieProvider } from \"./states/MovieContext\"\nimport {FilteredMovieProvider} from \"./states/FilteredMovieContext\"\n\n\n// Import components\nimport MoviesList from \"./components/MoviesList\"\nimport Nav from \"./components/Nav\"\nimport Home from \"./components/Home\"\n\nconst App = () => {\n    return (\n        <div className=\"App\">\n            <Router>\n                <FilteredMovieProvider>\n\n                    <MovieProvider>\n                        <Nav/>\n                    </MovieProvider>\n\n                    <Switch>\n                        <Route path={'/'} exact component={Home}/>\n                        <MovieProvider>\n                            <Route path={'/movies'} component={MoviesList}/>\n                        </MovieProvider>\n                    </Switch>\n                </FilteredMovieProvider>\n            </Router>\n        </div>\n    )\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}